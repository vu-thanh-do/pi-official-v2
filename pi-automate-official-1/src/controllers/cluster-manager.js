const cluster = require('cluster');
const os = require('os');
const { EventEmitter } = require('events');
const ExcelReaderService = require("../models/excelSheed");
const path = require("path");

class ClusterManager extends EventEmitter {
  constructor(options = {}) {
    super();
    // T√≠nh to√°n s·ªë l∆∞·ª£ng worker t·ªëi ∆∞u - m·∫∑c ƒë·ªãnh ƒë·ªÉ l·∫°i 1 core cho h·ªá th·ªëng
    this.numCPUs = options.numWorkers || Math.max(1, os.cpus().length - 1);
    // S·ªë l∆∞·ª£ng lu·ªìng ƒë·ªìng th·ªùi t·ªëi ƒëa cho m·ªói worker
    this.workerConcurrencyLimit = options.concurrencyLimit || process.env.MAX_CONCURRENCY 
      ? parseInt(process.env.MAX_CONCURRENCY, 10)
      : 200; 
    this.workers = [];
    this.workersData = new Map(); // L∆∞u tr·ªØ d·ªØ li·ªáu cho m·ªói worker
    this.results = {
      total: 0,
      success: 0,
      failure: 0,
      completed: 0,
      piknowedPostIds: [] // Th√™m danh s√°ch ID b√†i ƒë√£ PiKnow
    };
    this.progressInterval = null;
    this.isShuttingDown = false;
  }

  // Kh·ªüi t·∫°o master process v√† worker processes
  async initialize() {
    if (cluster.isPrimary) {
      console.log(`Master process ${process.pid} ƒëang ch·∫°y`);
      console.log(`Kh·ªüi t·∫°o ${this.numCPUs} worker processes...`);
      
      // ƒê·∫£m b·∫£o workerConcurrencyLimit l√† s·ªë h·ª£p l·ªá
      if (isNaN(this.workerConcurrencyLimit) || this.workerConcurrencyLimit <= 0) {
        this.workerConcurrencyLimit = 200;
        console.log(`Ph√°t hi·ªán gi√° tr·ªã kh√¥ng h·ª£p l·ªá, ƒë·∫∑t l·∫°i gi·ªõi h·∫°n lu·ªìng m·∫∑c ƒë·ªãnh: ${this.workerConcurrencyLimit}`);
      }
      
      console.log(`M·ªói worker ƒë∆∞·ª£c c·∫•u h√¨nh v·ªõi ${this.workerConcurrencyLimit} lu·ªìng ƒë·ªìng th·ªùi`);

      // X·ª≠ l√Ω s·ª± ki·ªán khi nh·∫≠n l·ªánh tho√°t
      process.on('SIGTERM', () => this.shutdown());
      process.on('SIGINT', () => this.shutdown());

      // Kh·ªüi t·∫°o workers
      for (let i = 0; i < this.numCPUs; i++) {
        this.createWorker();
      }

      // X·ª≠ l√Ω khi worker k·∫øt th√∫c
      cluster.on('exit', (worker, code, signal) => {
        console.log(`Worker ${worker.process.pid} ƒë√£ tho√°t v·ªõi code: ${code} v√† signal: ${signal}`);
        
        // Lo·∫°i b·ªè worker kh·ªèi danh s√°ch
        this.workers = this.workers.filter(w => w.id !== worker.id);
        
        // Kh·ªüi ƒë·ªông l·∫°i worker n·∫øu kh√¥ng ph·∫£i ƒëang shutdown
        if (!this.isShuttingDown && code !== 0) {
          console.log(`ƒêang kh·ªüi ƒë·ªông l·∫°i worker...`);
          this.createWorker();
        }
      });

      // B·∫Øt ƒë·∫ßu hi·ªÉn th·ªã ti·∫øn ƒë·ªô ƒë·ªãnh k·ª≥
      this.startProgressReporting();

      return true;
    } else {
      console.log(`Worker ${process.pid} ƒë√£ kh·ªüi ƒë·ªông`);
      return false;
    }
  }

  // T·∫°o worker m·ªõi
  createWorker() {
    // ƒê·∫£m b·∫£o gi√° tr·ªã concurrencyLimit l√† s·ªë h·ª£p l·ªá tr∆∞·ªõc khi truy·ªÅn v√†o worker
    const validConcurrencyLimit = isNaN(this.workerConcurrencyLimit) ? 2 : this.workerConcurrencyLimit;
    
    const worker = cluster.fork({
      MAX_CONCURRENCY: validConcurrencyLimit.toString() // Chuy·ªÉn th√†nh string ƒë·ªÉ ƒë·∫£m b·∫£o truy·ªÅn ƒë√∫ng
    });
    
    this.workers.push(worker);
    this.workersData.set(worker.id, {
      pid: worker.process.pid,
      status: 'idle',
      success: 0,
      failure: 0,
      completed: 0,
      startTime: Date.now(),
      concurrencyLimit: validConcurrencyLimit
    });

    // L·∫Øng nghe message t·ª´ worker
    worker.on('message', (message) => {
      if (message.type === 'progress') {
        this.updateProgress(worker.id, message.data);
      } else if (message.type === 'complete') {
        this.handleWorkerComplete(worker.id, message.data);
      } else if (message.type === 'log') {
        console.log(`[Worker ${worker.process.pid}] ${message.data}`);
      } else if (message.type === 'error') {
        console.error(`[Worker ${worker.process.pid}] Error: ${message.data.error}`);
      }
    });

    return worker;
  }

  // Thi·∫øt l·∫≠p s·ªë l∆∞·ª£ng lu·ªìng ƒë·ªìng th·ªùi cho t·∫•t c·∫£ worker
  setAllWorkerConcurrency(limit) {
    if (typeof limit !== 'number' || limit <= 0) {
      console.error(`Gi√° tr·ªã gi·ªõi h·∫°n lu·ªìng kh√¥ng h·ª£p l·ªá: ${limit}`);
      return;
    }

    console.log(`ƒêang ƒë·∫∑t gi·ªõi h·∫°n lu·ªìng ${limit} cho t·∫•t c·∫£ worker...`);
    this.workerConcurrencyLimit = limit;

    // C·∫≠p nh·∫≠t cho t·∫•t c·∫£ worker ƒëang ho·∫°t ƒë·ªông
    for (const worker of this.workers) {
      if (worker.isConnected()) {
        worker.send({
          type: 'set-concurrency',
          data: {
            concurrencyLimit: limit
          }
        });
      }
    }
  }

  // T·∫Øt t·∫•t c·∫£ worker
  shutdown() {
    console.log('Nh·∫≠n l·ªánh tho√°t. ƒêang d·ª´ng t·∫•t c·∫£ worker processes...');
    this.isShuttingDown = true;
    
    if (this.progressInterval) {
      clearInterval(this.progressInterval);
    }
    
    for (const worker of this.workers) {
      console.log(`G·ª≠i l·ªánh SIGTERM ƒë·∫øn worker ${worker.process.pid}...`);
      worker.kill('SIGTERM');
    }
    
    // ƒê·∫£m b·∫£o t·∫•t c·∫£ worker tho√°t sau 5 gi√¢y
    setTimeout(() => {
      for (const worker of this.workers) {
        if (worker.isConnected()) {
          console.log(`Force kill worker ${worker.process.pid}...`);
          worker.kill('SIGKILL');
        }
      }
    }, 5000);
  }

  // B·∫Øt ƒë·∫ßu hi·ªÉn th·ªã ti·∫øn ƒë·ªô ƒë·ªãnh k·ª≥
  startProgressReporting() {
    if (this.progressInterval) {
      clearInterval(this.progressInterval);
    }
    
    this.progressInterval = setInterval(() => {
      this.displayProgress();
    }, 3000);
  }

  // Hi·ªÉn th·ªã ti·∫øn ƒë·ªô t·ªïng qu√°t
  displayProgress() {
    const percent = this.results.total > 0 
      ? Math.floor((this.results.completed / this.results.total) * 100) 
      : 0;
    
    const bar = Array(20).fill('‚ñí')
      .map((char, i) => i < Math.floor(percent / 5) ? '‚ñà' : '‚ñí')
      .join('');

    console.log(`\n-------- TR·∫†NG TH√ÅI TI·∫æN ƒê·ªò --------`);
    console.log(`[${bar}] ${percent}% (${this.results.completed}/${this.results.total})`);
    console.log(`‚úÖ Th√†nh c√¥ng: ${this.results.success} | ‚ùå Th·∫•t b·∫°i: ${this.results.failure}`);
    console.log(`üßµ Worker ƒëang ch·∫°y: ${this.workers.length} | üîÑ Lu·ªìng m·ªói worker: ${this.workerConcurrencyLimit}`);
    
    // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c√°c worker
    console.log(`\n-------- CHI TI·∫æT WORKER --------`);
    for (const [workerId, data] of this.workersData.entries()) {
      if (data.completed > 0) {
        console.log(`Worker ${data.pid}: Ho√†n th√†nh ${data.completed}, Th√†nh c√¥ng: ${data.success}, Th·∫•t b·∫°i: ${data.failure}, Lu·ªìng: ${data.concurrencyLimit || this.workerConcurrencyLimit}`);
      }
    }
    console.log(`------------------------------------------\n`);
    
    this.emit('progress', this.results);
  }

  // Ph√¢n ph·ªëi t√†i kho·∫£n cho c√°c worker ƒë·ªÉ ƒêƒÇNG B√ÄI
  async distributeAccounts(totalPostCount) {
    if (!cluster.isPrimary) return;

    try {
      const userObjects = await this._readUserAccounts();
      
      if (userObjects.length === 0) {
        throw new Error("Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë·ªçc ƒë∆∞·ª£c t·ª´ file Excel!");
      }
      
      // Ch·ªâ gi·ªØ l·∫°i c√°c worker ƒëang ho·∫°t ƒë·ªông
      const activeWorkers = this.workers.filter(worker => worker.isConnected());
      
      if (activeWorkers.length === 0) {
        throw new Error("Kh√¥ng c√≥ worker n√†o ƒëang ho·∫°t ƒë·ªông!");
      }
      
      // Ph√¢n chia danh s√°ch t√†i kho·∫£n cho c√°c worker
      const accountsPerWorker = Math.max(1, Math.ceil(userObjects.length / activeWorkers.length));
      console.log(`M·ªói worker s·∫Ω x·ª≠ l√Ω kho·∫£ng ${accountsPerWorker} t√†i kho·∫£n`);
      
      for (let i = 0; i < activeWorkers.length; i++) {
        const worker = activeWorkers[i];
        const startIndex = i * accountsPerWorker;
        const endIndex = Math.min(startIndex + accountsPerWorker, userObjects.length);
        
        if (startIndex >= userObjects.length) {
          // Worker n√†y kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë·ªÉ x·ª≠ l√Ω
          console.log(`Worker ${worker.process.pid} kh√¥ng ƒë∆∞·ª£c ph√¢n c√¥ng t√†i kho·∫£n n√†o`);
          worker.send({
            type: 'accounts',
            data: {
              accounts: [],
              postCount: totalPostCount
            }
          });
          continue;
        }
        
        const workerAccounts = userObjects.slice(startIndex, endIndex);
        
        // C·∫≠p nh·∫≠t th√¥ng tin worker
        const workerData = this.workersData.get(worker.id);
        if (workerData) {
          workerData.status = 'busy';
          workerData.accounts = workerAccounts.length;
          workerData.totalTasks = workerAccounts.length * totalPostCount;
        }
        
        // G·ª≠i danh s√°ch t√†i kho·∫£n cho worker
        worker.send({
          type: 'accounts',
          data: {
            accounts: workerAccounts,
            postCount: totalPostCount
          }
        });
        
        console.log(`ƒê√£ g·ª≠i ${workerAccounts.length} t√†i kho·∫£n cho worker ${worker.process.pid}`);
      }
      
      // C·∫≠p nh·∫≠t t·ªïng s·ªë t√°c v·ª•
      this.results.total = userObjects.length * totalPostCount;
      console.log(`T·ªïng s·ªë b√†i vi·∫øt d·ª± ki·∫øn: ${this.results.total}`);
    } catch (error) {
      console.error('L·ªói khi ph√¢n ph·ªëi t√†i kho·∫£n:', error);
      this.emit('error', error);
    }
  }

  // Ph√¢n ph·ªëi t√†i kho·∫£n cho c√°c worker ƒë·ªÉ PIKNOW
  async distributePiKnowAccounts(totalPiKnowCount) {
    if (!cluster.isPrimary) return;

    try {
      const userObjects = await this._readUserAccounts();
      
      if (userObjects.length === 0) {
        throw new Error("Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë·ªçc ƒë∆∞·ª£c t·ª´ file Excel!");
      }
      
      // Ch·ªâ gi·ªØ l·∫°i c√°c worker ƒëang ho·∫°t ƒë·ªông
      const activeWorkers = this.workers.filter(worker => worker.isConnected());
      
      if (activeWorkers.length === 0) {
        throw new Error("Kh√¥ng c√≥ worker n√†o ƒëang ho·∫°t ƒë·ªông!");
      }
      
      // Ph√¢n chia danh s√°ch t√†i kho·∫£n cho c√°c worker
      const accountsPerWorker = Math.max(1, Math.ceil(userObjects.length / activeWorkers.length));
      console.log(`M·ªói worker s·∫Ω x·ª≠ l√Ω kho·∫£ng ${accountsPerWorker} t√†i kho·∫£n cho PiKnow`);
      
      for (let i = 0; i < activeWorkers.length; i++) {
        const worker = activeWorkers[i];
        const startIndex = i * accountsPerWorker;
        const endIndex = Math.min(startIndex + accountsPerWorker, userObjects.length);
        
        if (startIndex >= userObjects.length) {
          // Worker n√†y kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë·ªÉ x·ª≠ l√Ω
          console.log(`Worker ${worker.process.pid} kh√¥ng ƒë∆∞·ª£c ph√¢n c√¥ng t√†i kho·∫£n n√†o cho PiKnow`);
          worker.send({
            type: 'piknow-accounts',
            data: {
              accounts: [],
              piknowCount: totalPiKnowCount
            }
          });
          continue;
        }
        
        const workerAccounts = userObjects.slice(startIndex, endIndex);
        
        // C·∫≠p nh·∫≠t th√¥ng tin worker
        const workerData = this.workersData.get(worker.id);
        if (workerData) {
          workerData.status = 'busy';
          workerData.accounts = workerAccounts.length;
          workerData.totalTasks = workerAccounts.length * totalPiKnowCount;
        }
        
        // G·ª≠i danh s√°ch t√†i kho·∫£n cho worker
        worker.send({
          type: 'piknow-accounts',
          data: {
            accounts: workerAccounts,
            piknowCount: totalPiKnowCount
          }
        });
        
        console.log(`ƒê√£ g·ª≠i ${workerAccounts.length} t√†i kho·∫£n cho worker ${worker.process.pid} ƒë·ªÉ PiKnow`);
      }
      
      // C·∫≠p nh·∫≠t t·ªïng s·ªë t√°c v·ª•
      this.results.total = userObjects.length * totalPiKnowCount;
      console.log(`T·ªïng s·ªë PiKnow d·ª± ki·∫øn: ${this.results.total}`);
    } catch (error) {
      console.error('L·ªói khi ph√¢n ph·ªëi t√†i kho·∫£n cho PiKnow:', error);
      this.emit('error', error);
    }
  }

  // H√†m ƒë·ªçc t√†i kho·∫£n t·ª´ Excel ƒë·ªÉ t√°i s·ª≠ d·ª•ng
  async _readUserAccounts() {
    const excelFilePath = path.join(__dirname, "../data/PI.xlsx");
    const excelReader = new ExcelReaderService(excelFilePath);
    const excelData = excelReader.readAllSheets();
    
    const uid = excelData["prxageng"]["uid"] || [];
    const piname = excelData["prxageng"]["piname"] || [];
    const proxy = excelData["prxageng"]["proxy"] || [];
    const ukey = excelData["prxageng"]["ukey"] || [];
    const userAgent = excelData["prxageng"]["user_agent"] || [];
    
    const userObjects = uid.filter(user => user !== null).map((user, index) => {
      if (index >= proxy.length) {
        console.error(`Kh√¥ng ƒë·ªß th√¥ng tin proxy cho user ${index + 1}`);
        return null;
      }
      
      try {
        const newProxy = proxy[index].split(":");
        return {
          uid: user,
          piname: piname[index] || `user_${user}`,
          ukey: ukey[index] || '',
          userAgent: userAgent[index] || 'Mozilla/5.0',
          proxy: {
            host: newProxy[0],
            port: newProxy[1],
            name: newProxy[2],
            password: newProxy[3],
          },
        };
      } catch (error) {
        console.error(`L·ªói x·ª≠ l√Ω user ${index + 1}: ${error.message}`);
        return null;
      }
    }).filter(user => user !== null);

    console.log(`ƒê·ªçc ƒë∆∞·ª£c ${userObjects.length} t√†i kho·∫£n t·ª´ file Excel`);
    return userObjects;
  }

  // C·∫≠p nh·∫≠t ti·∫øn tr√¨nh t·ª´ c√°c worker
  updateProgress(workerId, progressData) {
    try {
      if (!progressData) return;

      const { success, failure, completed, piknowedPostIds, likeResult } = progressData;
      
      // C·∫≠p nh·∫≠t th√¥ng tin chi ti·∫øt c·ªßa worker
      const workerData = this.workersData.get(workerId);
      if (workerData) {
        workerData.success += success || 0;
        workerData.failure += failure || 0;
        workerData.completed += completed || 0;
        workerData.lastUpdate = Date.now();
      }
      
      // C·∫≠p nh·∫≠t t·ªïng h·ª£p
      this.results.success += success || 0;
      this.results.failure += failure || 0;
      this.results.completed += completed || 0;
      
      // Th√™m ID b√†i ƒë√£ PiKnow v√†o danh s√°ch t·ªïng h·ª£p
      if (piknowedPostIds && Array.isArray(piknowedPostIds)) {
        this.results.piknowedPostIds = [
          ...this.results.piknowedPostIds,
          ...piknowedPostIds
        ];
      }
      
      // N·∫øu l√† LikeEachOtherManager, x·ª≠ l√Ω k·∫øt qu·∫£ like
      if (likeResult && typeof this.updateLikeResult === 'function') {
        try {
          this.updateLikeResult(workerId, likeResult);
        } catch (error) {
          console.error(`L·ªói khi x·ª≠ l√Ω k·∫øt qu·∫£ like cho worker ${workerId}:`, error);
        }
      }
    } catch (error) {
      console.error(`L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c trong updateProgress:`, error);
    }
  }

  // X·ª≠ l√Ω khi worker ho√†n th√†nh c√¥ng vi·ªác
  handleWorkerComplete(workerId, data) {
    const workerData = this.workersData.get(workerId);
    if (workerData) {
      workerData.status = 'completed';
      console.log(`Worker ${workerData.pid} ƒë√£ ho√†n th√†nh c√¥ng vi·ªác!`);
    }
    
    // Ki·ªÉm tra n·∫øu t·∫•t c·∫£ worker ƒë√£ ho√†n th√†nh
    const allCompleted = Array.from(this.workersData.values())
      .every(data => data.status === 'completed' || data.status === 'idle' || !data.accounts);
    
    if (allCompleted || this.results.completed >= this.results.total) {
      this.displayProgress();
      console.log(`\n>> K·∫øt qu·∫£ cu·ªëi c√πng: ${this.results.success} t√°c v·ª• th√†nh c√¥ng, ${this.results.failure} t√°c v·ª• th·∫•t b·∫°i`);
      
      if (this.progressInterval) {
        clearInterval(this.progressInterval);
      }
      
      this.emit('complete', this.results);
    }
  }
}

module.exports = ClusterManager; 